<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Evgeni Kolev's blog</title>
    <link href="http://edkolev.github.io//atom.xml" rel="self" />
    <link href="http://edkolev.github.io/" />
    <id>http://edkolev.github.io//atom.xml</id>
    <author>
        <name>Evgeni Kolev</name>
        <email>test@example.com</email>
    </author>
    <updated>2017-09-25T00:00:00Z</updated>
    <entry>
    <title>Quickstart emacs with evil</title>
    <link href="http://edkolev.github.io//posts/2017-09-25-emacs-use-package-with-evil-quickstart.html" />
    <id>http://edkolev.github.io//posts/2017-09-25-emacs-use-package-with-evil-quickstart.html</id>
    <published>2017-09-25T00:00:00Z</published>
    <updated>2017-09-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    September 25, 2017
    
</div>

<p>This post is intended to present a minimal example of setting up emacs with evil, and a few common evil plugins like evil-surround.</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span class="co">;; load package manager, add the Melpa package registry</span>
(<span class="kw">require</span> &#39;package)
(add-to-list &#39;package-archives &#39;(<span class="st">&quot;melpa&quot;</span> . <span class="st">&quot;https://melpa.org/packages/&quot;</span>) <span class="kw">t</span>)
(package-initialize)

<span class="co">;; bootstrap use-package</span>
(<span class="kw">unless</span> (package-installed-p &#39;use-package)
  (package-refresh-contents)
  (package-install &#39;use-package))
(<span class="kw">require</span> &#39;use-package)

<span class="co">;; load evil</span>
(<span class="kw">use-package</span> evil
  :ensure <span class="kw">t</span> <span class="co">;; install the evil package if not installed</span>
  :init <span class="co">;; tweak evil&#39;s configuration before loading it</span>
  (<span class="kw">setq</span> evil-search-module &#39;evil-search)
  (<span class="kw">setq</span> evil-ex-complete-emacs-commands <span class="kw">nil</span>)
  (<span class="kw">setq</span> evil-vsplit-window-right <span class="kw">t</span>)
  (<span class="kw">setq</span> evil-split-window-below <span class="kw">t</span>)
  (<span class="kw">setq</span> evil-shift-round <span class="kw">nil</span>)
  (<span class="kw">setq</span> evil-want-C-u-scroll <span class="kw">t</span>)
  :config <span class="co">;; tweak evil after loading it</span>
  (evil-mode)

  <span class="co">;; example how to map a command in normal mode (called &#39;normal state&#39; in evil)</span>
  (define-key evil-normal-state-map (kbd <span class="st">&quot;, w&quot;</span>) &#39;evil-window-vsplit))

<span class="co">;; vdiff</span>
(<span class="kw">use-package</span> vdiff
  :ensure <span class="kw">t</span>
  <span class="co">;; the :commands part is optional, it ensures the vdiff packages is lazy loaded</span>
  :commands (vdiff-buffers vdiff-buffers3 vdiff-files vdiff-files3)
  :init
  <span class="co">;; add ex commands, :vdiff-buffers etc.</span>
  (evil-ex-define-cmd <span class="st">&quot;vdiff-buffers&quot;</span> &#39;vdiff-buffers)
  (evil-ex-define-cmd <span class="st">&quot;vdiff-buffers3&quot;</span> &#39;vdiff-buffers3)
  (evil-ex-define-cmd <span class="st">&quot;vdiff-files&quot;</span> &#39;vdiff-files)
  (evil-ex-define-cmd <span class="st">&quot;vdiff-files3&quot;</span> &#39;vdiff-files3)
  (evil-ex-define-cmd <span class="st">&quot;diff-orig&quot;</span> &#39;vdiff-current-file)
  :config
  <span class="co">;; vdiff is a minor mode, use function `evil-define-minor-mode-key&#39;</span>
  <span class="co">;; to map keys when minor modes are active</span>
  (evil-define-minor-mode-key &#39;normal &#39;vdiff-mode
    <span class="st">&quot;]c&quot;</span> &#39;vdiff-next-hunk
    <span class="st">&quot;[c&quot;</span> &#39;vdiff-previous-hunk
    <span class="st">&quot;zc&quot;</span> &#39;vdiff-close-fold
    <span class="st">&quot;zM&quot;</span> &#39;vdiff-close-all-folds
    <span class="st">&quot;zo&quot;</span> &#39;vdiff-open-fold
    <span class="st">&quot;zR&quot;</span> &#39;vdiff-open-all-folds
    <span class="st">&quot;go&quot;</span> &#39;vdiff-receive-changes
    <span class="st">&quot;gp&quot;</span> &#39;vdiff-send-changes
    <span class="st">&quot;q&quot;</span> &#39;evgeni-vdiff-close-if-readonly))

(<span class="kw">use-package</span> js2-mode
  <span class="co">;; example how to map a command in normal mode, only when a major mode is active</span>
  <span class="co">;; TODO finish this</span>
  (evil-define-key &#39;normal perl-mode-map
    (kbd <span class="st">&quot;C-c f&quot;</span>) &#39;evgeni-define-perl-function))

<span class="co">;; TODO evil plugins</span></code></pre></div>

<div id="disqus_thread"></div>
<script>
    (function() {
        var d = document, s = d.createElement('script');
        s.src = 'https://edkolev.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>Make :only ex command reversible</title>
    <link href="http://edkolev.github.io//posts/2017-09-22-reversable-ex-only-command.html" />
    <id>http://edkolev.github.io//posts/2017-09-22-reversable-ex-only-command.html</id>
    <published>2017-09-22T00:00:00Z</published>
    <updated>2017-09-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    September 22, 2017
    
</div>

<p>The <code>:only</code> ex command is one of my most used ones. Here’s how it can be tweaked so that it doesn’t only (pun intended) hide all the other windows, but it restores them when re-executed. it You can think of it as a zoom/un-zoom command.</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp">(<span class="kw">use-package</span> zygospore
  :ensure <span class="kw">t</span>
  :commands zygospore-toggle-delete-other-windows
  :init
  (evil-ex-define-cmd <span class="st">&quot;only&quot;</span> &#39;zygospore-toggle-delete-other-windows))</code></pre></div>
<p>The above snippet uses the <a href="https://github.com/louiskottmann/zygospore.el">zygospore</a> package, which is but a thin wrapper around emacs core functionality. Go ahead and check out its code.</p>
<p>I often enter <code>:On</code> instead of <code>:on</code> which results in a disruption of my flow with an unpleasant “Unknown command” message. Why not create an alias then?</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp">(evil-ex-define-cmd <span class="st">&quot;Only&quot;</span> <span class="st">&quot;only&quot;</span>)</code></pre></div>

<div id="disqus_thread"></div>
<script>
    (function() {
        var d = document, s = d.createElement('script');
        s.src = 'https://edkolev.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>Travis CI integration for emacs packages</title>
    <link href="http://edkolev.github.io//posts/2017-09-10-travis-for-emacs-packages.html" />
    <id>http://edkolev.github.io//posts/2017-09-10-travis-for-emacs-packages.html</id>
    <published>2017-09-10T00:00:00Z</published>
    <updated>2017-09-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    September 10, 2017
    
</div>

<p>This post will show how to add simple make-based testing support for running automated emacs <code>ert</code> tests.</p>
<p>The following utilities will be available on the development machine:</p>
<ul>
<li><code>make update</code> will install the development dependencies</li>
<li><code>make compile</code> will compile the .el files</li>
<li><code>make test</code> will run the <code>ert</code> tests</li>
<li><code>make clean</code> will remove the compiled files</li>
</ul>
<p>The Travis build will fail with an error when:</p>
<ul>
<li>a compilation warning or error occurs</li>
<li>an automated test fails</li>
</ul>
<p>This will be the resulting directory structure, where <code>&lt;my-package&gt;.el</code> is the hypothetical package we’d like to test:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">.</span>
├── <span class="ex">.travis.yml</span>         <span class="kw">;;</span> <span class="ex">Travis</span> CI config
├── <span class="ex">.elpa</span>               <span class="kw">;;</span> <span class="ex">contains</span> installed deps
├── <span class="ex">Makefile</span>            <span class="kw">;;</span> <span class="ex">shortcuts</span> to test/make-*.el
├── <span class="op">&lt;</span><span class="ex">my-package</span><span class="op">&gt;</span>.el     <span class="kw">;;</span> <span class="ex">package</span> being tested
└── <span class="bu">test</span>
    ├── <span class="ex">elpa.el</span>         <span class="kw">;;</span> <span class="ex">initialize</span> package.el
    ├── <span class="ex">tests.el</span>        <span class="kw">;;</span> <span class="ex">automated</span> tests
    ├── <span class="ex">make-compile.el</span> <span class="kw">;;</span> <span class="ex">compile</span> *el files
    ├── <span class="ex">make-test.el</span>    <span class="kw">;;</span> <span class="ex">run</span> automated tests
    └── <span class="ex">make-update.el</span>  <span class="kw">;;</span> <span class="fu">install</span> dependencies</code></pre></div>
<p>These files have to be modified, the rest can be copied as is:</p>
<ul>
<li><code>test/make-compile.el</code> contains the dev dependencies of the package</li>
<li><code>test/tests.el</code> contains the automated tests</li>
</ul>
<p>The rest of the files don’t need to be modified. However, if needed, they can easily be changed since each one is small, simple, serves one purpose, thus easy to tweak.</p>
<h2 id="travis.yml">.travis.yml</h2>
<p>This file is the entry point for Travis CI.</p>
<div class="sourceCode"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="co"># .travis.yml</span>
<span class="fu">sudo:</span><span class="at"> true</span>
<span class="fu">dist:</span><span class="at"> precise</span>
<span class="fu">language:</span><span class="at"> emacs-lisp</span>
<span class="fu">env:</span>
  <span class="fu">matrix:</span>
    <span class="kw">-</span> emacs=emacs-snapshot

<span class="fu">before_install:</span>
  <span class="kw">-</span> <span class="fu">sudo add-apt-repository -y ppa:</span><span class="at">ubuntu-elisp</span>
  <span class="kw">-</span> sudo apt-get update -qq
  <span class="kw">-</span> sudo apt-get install -qq $emacs

<span class="fu">script:</span>
  <span class="kw">-</span> make update
  <span class="kw">-</span> make compile
  <span class="kw">-</span> make test</code></pre></div>
<h2 id="makefile">Makefile</h2>
<p>The Makefile is used for nothing but shortcuts to running the tasks.</p>
<div class="sourceCode"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span class="dv">update:</span>
	emacs -batch -l test/make-update.el

<span class="dv">compile:</span><span class="dt"> clean</span>
	emacs -batch -l test/elpa.el -l test/make-compile.el

<span class="dv">test:</span>
	emacs -batch -l test/elpa.el -l test/make-test.el

<span class="dv">clean:</span>
	rm -f *.elc

<span class="ot">.PHONY:</span><span class="dt"> update compile test clean</span></code></pre></div>
<h2 id="testelpa.el">test/elpa.el</h2>
<p>Initializes package.el.</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp">(<span class="kw">setq</span> package-user-dir
      (expand-file-name (<span class="kw">format</span> <span class="st">&quot;.elpa/%s/elpa&quot;</span> emacs-version)))
(package-initialize)
(add-to-list &#39;load-path default-directory)</code></pre></div>
<h2 id="testmake-compile.el">test/make-compile.el</h2>
<p>This file compiles <code>*.el</code> files in the package root directory.</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span class="co">;;  bail out on compilation warnings and errors</span>
(<span class="kw">setq</span> byte-compile-error-on-warn <span class="kw">t</span>)
(<span class="kw">setq</span> byte-compile--use-old-handlers <span class="kw">nil</span>)

<span class="co">;; compile *.el files</span>
(<span class="kw">dolist</span> (file (file-expand-wildcards <span class="st">&quot;*.el&quot;</span>))
  (<span class="kw">unless</span> (byte-compile-file file)
    (kill-emacs <span class="dv">1</span>)))</code></pre></div>
<h2 id="testmake-test.el">test/make-test.el</h2>
<p>This file runs the tests in <code>tests/tests.el</code>.</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp">(<span class="kw">let*</span> ((project-tests-file <span class="st">&quot;tests.el&quot;</span>)
       (current-directory (file-name-directory load-file-name))
       (project-test-path (expand-file-name <span class="st">&quot;.&quot;</span> current-directory))
       (project-root-path (expand-file-name <span class="st">&quot;..&quot;</span> current-directory)))

  <span class="co">;; add the package being tested to &#39;load-path so it can be &#39;require-d</span>
  (add-to-list &#39;load-path project-root-path)
  (add-to-list &#39;load-path project-test-path)

  <span class="co">;; load the file with tests</span>
  (<span class="kw">load</span> (expand-file-name project-tests-file project-test-path) <span class="kw">nil</span> <span class="kw">t</span>)

  <span class="co">;; run the tests</span>
  (ert-run-tests-batch-and-exit))</code></pre></div>
<h2 id="testmake-update.el">test/make-update.el</h2>
<p>This file installs dependencies in the <code>.elpa</code> directory.</p>
<p>The <code>dev-packages</code> variable should be modified per the package’s needs. This example adds the <code>evil</code> and <code>evil-test-helpers</code> packages as dependencies for illustrative purpose.</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span class="co">;; list of the all the dependencies, including the dev dependencies</span>
(<span class="kw">defvar</span><span class="fu"> dev-packages </span>&#39;(evil evil-test-helpers))

<span class="co">;; initialize package.el</span>
(<span class="kw">setq</span> package-user-dir
      (expand-file-name (<span class="kw">format</span> <span class="st">&quot;.elpa/%s/elpa&quot;</span> emacs-version)))
(message <span class="st">&quot;installing in %s ...</span>\n<span class="st">&quot;</span> package-user-dir)
(package-initialize)
(<span class="kw">setq</span> package-archives
      &#39;((<span class="st">&quot;melpa&quot;</span> . <span class="st">&quot;http://melpa.org/packages/&quot;</span>)
        (<span class="st">&quot;gnu&quot;</span> . <span class="st">&quot;http://elpa.gnu.org/packages/&quot;</span>)))
(package-refresh-contents)

<span class="co">;; install dependencies</span>
(<span class="kw">dolist</span> (<span class="kw">package</span> dev-packages)
  (<span class="kw">unless</span> (package-installed-p <span class="kw">package</span>)
    (<span class="kw">ignore-errors</span>
      (package-install <span class="kw">package</span>))))

<span class="co">;; upgrade dependencies</span>
(save-window-excursion
  (package-list-packages <span class="kw">t</span>)
  (condition-case <span class="kw">nil</span>
      (<span class="kw">progn</span>
        (package-menu-mark-upgrades)
        (package-menu-execute <span class="kw">t</span>))
    (<span class="kw">error</span>
     (message <span class="st">&quot;All packages up to date&quot;</span>))))</code></pre></div>
<h2 id="testtests.el">test/tests.el</h2>
<p>This file contains the unit tests for <code>my-package</code>, the package being tested. This example tests a hypothetical function <code>my-package-add-numers</code>.</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp">(<span class="kw">require</span> &#39;ert)
(<span class="kw">require</span> &#39;my-package)

(ert-deftest sample-test ()
  (ert-info (<span class="st">&quot;test function my-package-add-numers&quot;</span>)
    (should (<span class="kw">eq</span> <span class="dv">3</span> (my-package-add-numers <span class="dv">1</span> <span class="dv">2</span>))</code></pre></div>
<h2 id="gitignore-optional">.gitignore (optional)</h2>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">.elpa/</span>
<span class="ex">*.elc</span></code></pre></div>
<h1 id="summary">Summary</h1>
<p>The described approach is simple in the sense that it doesn’t add any dependencies to the package, other than <code>make</code>. Everything else is included with emacs - package.el, ert.el, etc.</p>
<p>The obvious disadvantage is the wordiness - this method involves multiple files.</p>
<p>See also:</p>
<ul>
<li><a href="https://github.com/cask/cask">cask</a> - this seems to be a tool designed for this purpose solely. Haven’t tried it yet.</li>
<li><a href="https://github.com/rejeep/evm">evm</a> - a tool which allows installing multiple versions of emacs. Seems entangled with cask, but doesn’t require it. This tool can be used to run the tests against multiple versions of emacs, not sure if it can be achieved without pulling in cask as a dependency</li>
</ul>

<div id="disqus_thread"></div>
<script>
    (function() {
        var d = document, s = d.createElement('script');
        s.src = 'https://edkolev.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>Why I switched to Emacs</title>
    <link href="http://edkolev.github.io//posts/2017-09-08-why-i-switched-to-emacs.html" />
    <id>http://edkolev.github.io//posts/2017-09-08-why-i-switched-to-emacs.html</id>
    <published>2017-09-08T00:00:00Z</published>
    <updated>2017-09-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    September  8, 2017
    
</div>

<h2 id="tldr">TL;DR</h2>
<p>This January I stopped using vim after years of sharpening my vim setup because I couldn’t understand this very <a href="https://github.com/junegunn/vim-slash/commit/5e9d77b6375ad3f24e9208fa7bd7dd0b1d1a0cc0">commit</a>.</p>
<h2 id="the-reason">The “reason”</h2>
<p>In my mother tongue there are two different words for “reason” with significant differences in their meaning. The first one “причина”, is used to describe an event or more commonly, a series of events which lead to what usually turns out to be a bad situation. The other one “повод”, describes the very last event, the final straw which lead to the event.</p>
<p>This commit, this patch of code was the last straw, it was the reason I would stop using my sharpened saw, my tool of trade, my Vim:</p>
<p><a href="https://github.com/junegunn/vim-slash/commit/5e9d77b6375ad3f24e9208fa7bd7dd0b1d1a0cc0">https://github.com/junegunn/vim-slash/commit/5e9d77b6</a></p>
<p>I had been following the <a href="https://github.com/junegunn/vim-slash">vim-slash</a> repo for some time because I had a similar functionality in my vimrc… and because I find this particular project interesting. I like following interesting projects.</p>
<p>That commit fixed an issue that I had been experiencing myself. However, even after years of using Vim and writing VimL I had no idea how this patch would address the issue.</p>
<p>On one hand, this commit seems like such an elegant solution to the problem - with just a few lines of code, the issue is completely fixed. On the other hand, however, this smells like such an ugly hack that.</p>
<p>Up until that moment, I had been seeing VimL as an elegant solution, such beauty, so similar to all the scripting languages I’m (painfully) familiar with… but not more. I had seen the true side of it and I couldn’t see it in any other way.</p>
<h2 id="the-cosmic-microwave-background-radiation">The cosmic microwave background radiation</h2>
<p>Like the cosmic microwave background radiation, emacs-lisp has been there all along, waiting for me to discover it. And now that I have, I can’t go back, I can’t deny its existence, I can’t go back to VimL.</p>
<p>Like seeing the “SH”, as in Steven Hawking, in the cosmic microwave background radiation - once you see it, you can’t un-see it.</p>
<div class="figure">
<img src="../images/2017-09-08-why-i-switched-to-emacs-ilc_9yr_moll4096.png" alt="cropped microwave background radiation image" />
<p class="caption">cropped microwave background radiation image</p>
</div>
<p><sub><sup><a href="../images/2017-09-08-why-i-switched-to-emacs-ilc_9yr_moll4096.png">image source</a></sup></sub></p>

<div id="disqus_thread"></div>
<script>
    (function() {
        var d = document, s = d.createElement('script');
        s.src = 'https://edkolev.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>Test post Hakyll</title>
    <link href="http://edkolev.github.io//posts/2017-04-09-hakyll-test-post.html" />
    <id>http://edkolev.github.io//posts/2017-04-09-hakyll-test-post.html</id>
    <published>2017-04-09T00:00:00Z</published>
    <updated>2017-04-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    April  9, 2017
    
</div>

<h1 id="test-post">test post</h1>
<p>This is a sentence. And another one.</p>
<p>This is some lisp code</p>
<div class="sourceCode"><pre class="sourceCode lisp"><code class="sourceCode commonlisp">(<span class="kw">defun</span><span class="fu"> test </span>(arg)
  (message <span class="st">&quot;hello&quot;</span>))</code></pre></div>

<div id="disqus_thread"></div>
<script>
    (function() {
        var d = document, s = d.createElement('script');
        s.src = 'https://edkolev.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>prompt working directory</title>
    <link href="http://edkolev.github.io//posts/2014-01-26-bash-directory-truncation.html" />
    <id>http://edkolev.github.io//posts/2014-01-26-bash-directory-truncation.html</id>
    <published>2014-01-26T00:00:00Z</published>
    <updated>2014-01-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    January 26, 2014
    
</div>

<h2 id="tldr">TL;DR</h2>
<p>Shorten <code>~/very/deep/down/the/rabbit/hole</code> to <code>⋯/the/rabbit/hole</code> in prompt.</p>
<!-- more -->
<p>If you’re staring at a shell prompt a few hours every day, you might as well try to modify the prompt to better suit your needs. Some people like a minimalistic prompt with nothing but the working dir and a dollar sign <code>~ $</code>. Others get an enormous 256-color multi-line beast holding information about the kernel version, battery status, daily horoscope and what not. There’s yet another group which sticks with whatever their system’s default is.</p>
<p>This post will hopefully come in handy for the first and second group.</p>
<h2 id="the-goal">The Goal</h2>
<p>The working directory should be readable no matter how <code>~/very/deep/down/the/rabbit/hole</code> you’re in in the file system. To maintain readability, the working dir displayed in the prompt should contain no more than three sub directories <code>⋯/the/rabbit/hole</code></p>
<p>Bash version 4+ actually has an option to do this <code>PROMPT_DIRTRIM=3</code>, but I find it’s behaviour ludicrous: it behaves (very) differently when the working dir is a sub dir of $HOME or not.</p>
<p>Working dir is a subdir of $HOME:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">~</span> $ <span class="va">PROMPT_DIRTRIM=</span>3
<span class="ex">~</span> $ <span class="bu">cd</span> one/
<span class="ex">~/one</span> $ cd two/
<span class="ex">~/one/two</span> $ cd three/
<span class="ex">~/one/two/three</span> $ cd four/
<span class="ex">~/one/two/three/four</span> $ cd five/
<span class="ex">~/.../three/four/five</span> $</code></pre></div>
<p>This is useless to me:</p>
<ul>
<li>Notice that when in dir <code>four</code>, the path is not truncated at all <code>~/one/two/three/four $</code></li>
<li>The tilde <code>~</code> is never truncated <code>~/.../three/four/five $</code></li>
</ul>
<p>Working dir is not a subdir of $HOME:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">~</span> $ <span class="va">PROMPT_DIRTRIM=</span>3
<span class="ex">/</span> $ cd one/
<span class="ex">/one</span> $ cd two/
<span class="ex">/one/two</span> $ cd three/
<span class="ex">/one/two/three</span> $ cd four/
<span class="ex">.../two/three/four</span> $ cd five/
<span class="ex">.../three/four/five</span> $</code></pre></div>
<p>This is much better! … or not:</p>
<ul>
<li>Most of the time I’m somewhere in $HOME</li>
<li>I would really like to use a single char <code>⋯</code> instead of three dots <code>...</code>. Screen real-estate does not come that cheap. I work with many vim/tmux panes, so cutting some fat here and there does make a difference.</li>
</ul>
<p>Also, I’ve been wanting to improve my shell scripting skills for some time. This seemed like a nice challenge.</p>
<h2 id="truncate-function">Truncate function</h2>
<p>In theory, truncating the $PWD to 3 dirs seemed like a very simple task. In practice, it turned out a (tiny) bit more complicated. In javascript (a language I’m mostly unfamiliar with), this could be achieved with pretty much one line of code:</p>
<p>(Note that this is greatly simplified and doesn’t handle any corner cases.)</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="va">PWD</span>.<span class="at">split</span>(<span class="st">&#39;/&#39;</span>).<span class="at">slice</span>(<span class="op">-</span><span class="dv">3</span>).<span class="at">join</span>(<span class="st">&#39;/&#39;</span>)</code></pre></div>
<p>How hard could it be to port this to bash (and zsh)?</p>
<p>One thing I want to stress is that external processes must <strong>not</strong> be created to achieve this task. This function must be as fast as possible and forking off <code>sed</code>, <code>awd</code> and what not, is not a viable option.</p>
<h2 id="the-result">The result</h2>
<p>After some research on bash/zsh arrays, some head-banging and quite a bit of coffee, I managed to achieve the desired result:</p>
<p>In a subdir of $HOME:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">~</span> $ <span class="bu">cd</span> one/
<span class="ex">~/one</span> $ cd two/
<span class="ex">~/one/two</span> $ cd three/
⋯<span class="ex">/one/two/three</span> $ cd four/
⋯<span class="ex">/two/three/four</span> $ cd five/</code></pre></div>
<p>Not in $HOME:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">/</span> $ cd one/
<span class="ex">/one</span> $ cd two/
<span class="ex">/one/two</span> $ cd three/
⋯<span class="ex">/one/two/three</span> $ cd four/
⋯<span class="ex">/two/three/four</span> $ cd five/</code></pre></div>
<p>As a bonus, the separator can be configured, for example it could be <code>&gt;</code></p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">~</span> $ <span class="bu">cd</span> one/
<span class="ex">~</span> <span class="op">&gt;</span> <span class="ex">one</span> $ cd two/
<span class="ex">~</span> <span class="op">&gt;</span> <span class="ex">one</span> <span class="op">&gt;</span> two $ cd three/
⋯ <span class="op">&gt;</span> <span class="ex">one</span> <span class="op">&gt;</span> two <span class="op">&gt;</span> three $ cd four/
⋯ <span class="op">&gt;</span> <span class="ex">two</span> <span class="op">&gt;</span> three <span class="op">&gt;</span> four $ cd five/</code></pre></div>
<p>Plus, with some minor modifications, I got the function working with powerline symbols for my <a href="https://github.com/edkolev/promptline.vim">promptline.vim</a> plugin:</p>
<p>{% img /images/promptline_cwd.png %}</p>
<h2 id="the-function-itself">The function itself</h2>
<p>Hopefully it would be useful to someone else. I certainly learned a lot writing (and re-writing) it. Enjoy!</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">function</span><span class="fu"> truncated_cwd</span> <span class="kw">{</span>
  <span class="co"># dir_limit and truncation can be configured</span>
  <span class="bu">local</span> <span class="va">dir_limit=</span><span class="st">&quot;3&quot;</span>
  <span class="bu">local</span> <span class="va">truncation=</span><span class="st">&quot;⋯&quot;</span>

  <span class="bu">local</span> <span class="va">first_char</span>
  <span class="bu">local</span> <span class="va">part_count=</span>0
  <span class="bu">local</span> <span class="va">formatted_cwd=</span><span class="st">&quot;&quot;</span>
  <span class="bu">local</span> <span class="va">dir_sep=</span><span class="st">&quot; | &quot;</span>

  <span class="bu">local</span> <span class="va">cwd=</span><span class="st">&quot;</span><span class="va">${PWD/</span>#<span class="va">$HOME/</span>~<span class="va">}</span><span class="st">&quot;</span>

  <span class="co"># get first char of the path, i.e. tilde or slash</span>
  [[ <span class="ex">-n</span> <span class="va">${ZSH_VERSION-}</span> ]] <span class="kw">&amp;&amp;</span> <span class="va">first_char=$cwd[1,1]</span> <span class="kw">||</span> <span class="va">first_char=${cwd::1}</span>

  <span class="co"># remove leading tilde</span>
  <span class="va">cwd=</span><span class="st">&quot;</span><span class="va">${cwd#</span>\~<span class="va">}</span><span class="st">&quot;</span>

  <span class="kw">while [[</span> <span class="st">&quot;</span><span class="va">$cwd</span><span class="st">&quot;</span> <span class="ot">==</span> */* &amp;&amp; <span class="st">&quot;</span><span class="va">$cwd</span><span class="st">&quot;</span> <span class="ot">!=</span> <span class="st">&quot;/&quot;</span><span class="kw"> ]]</span>; <span class="kw">do</span>
    <span class="co"># pop off last part of cwd</span>
    <span class="bu">local</span> <span class="va">part=</span><span class="st">&quot;</span><span class="va">${cwd##</span>*/<span class="va">}</span><span class="st">&quot;</span>
    <span class="va">cwd=</span><span class="st">&quot;</span><span class="va">${cwd%</span>/*<span class="va">}</span><span class="st">&quot;</span>

    <span class="va">formatted_cwd=</span><span class="st">&quot;</span><span class="va">$dir_sep$part$formatted_cwd</span><span class="st">&quot;</span>
    <span class="va">part_count=$((</span>part_count+1<span class="va">))</span>

    [[ <span class="va">$part_count</span> <span class="ex">-eq</span> <span class="va">$dir_limit</span> ]] <span class="kw">&amp;&amp;</span> <span class="va">first_char=</span><span class="st">&quot;</span><span class="va">$truncation</span><span class="st">&quot;</span> <span class="kw">&amp;&amp;</span> <span class="bu">break</span>
  <span class="kw">done</span>

  [[ <span class="st">&quot;</span><span class="va">$formatted_cwd</span><span class="st">&quot;</span> != <span class="va">$first_char</span><span class="ex">*</span> ]] <span class="kw">&amp;&amp;</span> <span class="va">formatted_cwd=</span><span class="st">&quot;</span><span class="va">$first_char$formatted_cwd</span><span class="st">&quot;</span>
  <span class="bu">printf</span> <span class="st">&quot;%s&quot;</span> <span class="st">&quot;</span><span class="va">$formatted_cwd</span><span class="st">&quot;</span>
<span class="kw">}</span></code></pre></div>
<p>There are a few ways to get the function in the prompt, this is probably the simplest one:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="va">PS1=</span><span class="st">&#39;$(truncated_cwd) \$ &#39;</span></code></pre></div>

<div id="disqus_thread"></div>
<script>
    (function() {
        var d = document, s = d.createElement('script');
        s.src = 'https://edkolev.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
]]></summary>
</entry>

</feed>
